var getCollection = require('./getCollection');
var handleId = require('./handleId');
exports.insert = function (collectionName, content, ck) {
    var fn = Array.isArray(content) ? 'insertMany' : 'insertOne';
    getCollection(collectionName, function (err, con, collection) {
        if (err) {
            return typeof ck === 'function' && ck(err);
        }
        collection[fn](content, function (err, res) {
            if (err) {
                return typeof ck === 'function' && ck(err);
            }
            typeof ck === 'function' && ck(null, res);
            con.close();
        });
    });
};
exports.delete = function (collectionName, condition, ck) {
    condition = handleId(condition);
    getCollection(collectionName, function (err, con, collection) {
        if (err) {
            return typeof ck === 'function' && ck(err);
        }
        collection.deleteMany(condition, function (err, res) {
            if (err) {
                return typeof ck === 'function' && ck(err);
            }
            typeof ck === 'function' && ck(null, res);
            con.close();
        });
    });
};
exports.update = function (collectionName, condition, newData, ck) {
    condition = handleId(condition);
    getCollection(collectionName, function (err, con, collection) {
        if (err) {
            return typeof ck === 'function' && ck(err);
        }
        collection.updateMany(condition, {$set: newData}, function (err, res) {
            if (err) {
                return typeof ck === 'function' && ck(err);
            }
            typeof ck === 'function' && ck(null, res);
            con.close();
        });
    });
};
exports.find = function (collectionName, condition, ck) {
    if (typeof condition === 'function') {
        ck = condition;
        condition = {};
    }
    condition = handleId(condition);
    getCollection(collectionName, function (err, con, collection) {
        if (err) {
            return typeof ck === 'function' && ck(err);
        }
        collection.find(condition).toArray(function (err, res) {
            if (err) {
                return typeof ck === 'function' && ck(err);
            }
            typeof ck === 'function' && ck(null, res);
            con.close();
        });
    });
};